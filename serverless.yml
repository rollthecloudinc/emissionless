service: goclassifieds-api
custom:
  elasticUrl: ${file(./private.${opt:stage, 'dev'}.json):elasticUrl}
  keyspaceUsername: ${file(./private.${opt:stage, 'dev'}.json):keyspaceUsername}
  keyspacePassword: ${file(./private.${opt:stage, 'dev'}.json):keyspacePassword}
  apigatewayEndpoint: ${file(./private.${opt:stage, 'dev'}.json):apigatewayEndpoint}
  userPoolId: ${file(./private.${opt:stage, 'dev'}.json):userPoolId}
  userPoolArn: ${file(./private.${opt:stage, 'dev'}.json):userPoolArn}
  cognitoAppClientId: ${file(./private.${opt:stage, 'dev'}.json):cognitoAppClientId}
  bucketName: ${file(./private.${opt:stage, 'dev'}.json):bucketName}
  proxyAveDomain: ${file(./private.${opt:stage, 'dev'}.json):proxyAveDomain}
  aveApikey: ${file(./private.${opt:stage, 'dev'}.json):aveApikey}
provider:
  name: aws
  runtime: go1.x
  memorySize: 256
  timeout: 10
  websocketsApiName: goclassifieds-stream
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  httpApi:
    payload: '1.0'
    cors: true
    authorizers:
      cognito:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/${self:custom.userPoolId}
        audience:
          - ${self:custom.cognitoAppClientId}
      authorizer2:
        type: request
        functionName: Authorize2
package:
  individually: false
  include:
    - bazel-bin/api/entity/linux_amd64_pure_stripped/entity
    - bazel-bin/api/media/linux_amd64_pure_stripped/media
    - bazel-bin/api/proxy/linux_amd64_pure_stripped/proxy
    - bazel-bin/api/chat/linux_amd64_pure_stripped/chat
    - bazel-bin/api/user/linux_amd64_pure_stripped/user
    - bazel-bin/api/stream/linux_amd64_pure_stripped/stream
    - bazel-bin/api/authorizer/linux_amd64_pure_stripped/authorizer
    - bazel-bin/api/authorizer2/linux_amd64_pure_stripped/authorizer2
    - bazel-bin/func/index_entity/linux_amd64_pure_stripped/index_entity
    - bazel-bin/func/validate_entity/linux_amd64_pure_stripped/validate_entity
    - bazel-bin/func/readable_profiles/linux_amd64_pure_stripped/readable_profiles
    - bazel-bin/func/convert_media/linux_amd64_pure_stripped/convert_media
    - bazel-bin/func/css_to_json/css_to_json.js
    - api/entity/types.json.tmpl
    - api/entity/queries.json.tmpl
    - api/chat/queries.tmpl
    - api/chat/AmazonRootCA1.pem
  exclude:
    - ./**
    - bazel-bin/api/entity/linux_amd64_pure_stripped/**
    - bazel-bin/api/media/linux_amd64_pure_stripped/**
    - bazel-bin/api/proxy/linux_amd64_pure_stripped/**
    - bazel-bin/api/chat/linux_amd64_pure_stripped/**
    - bazel-bin/api/user/linux_amd64_pure_stripped/**
    - bazel-bin/api/stream/linux_amd64_pure_stripped/**
    - bazel-bin/api/authorizer/linux_amd64_pure_stripped/**
    - bazel-bin/api/authorizer2/linux_amd64_pure_stripped/**
    - bazel-bin/func/index_entity/linux_amd64_pure_stripped/**
    - bazel-bin/func/validate_entity/linux_amd64_pure_stripped/**
    - bazel-bin/func/readable_profiles/linux_amd64_pure_stripped/**
    - bazel-bin/func/convert_media/linux_amd64_pure_stripped/**
    - bazel-bin/func/css_to_json/**
resources:
  Resources:
    EntityApiRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        RoleName: "goclassifieds-entity-api-us-east-1-lambdaRole"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole   
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: goclassifieds-entity-api-lambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                    - logs:GetLogEvents
                    - logs:FilterLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource: "arn:aws:s3:::${self:custom.bucketName}/*/*"
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "cognito-idp:ListUsers"
                  Resource: ${self:custom.userPoolArn}
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                    - "execute-api:ManageConnections"
                  Resource: "*"
functions:
  EntityApi:
    handler: bazel-bin/api/entity/linux_amd64_pure_stripped/entity
    role: EntityApiRole
    environment:
      ELASTIC_URL: ${self:custom.elasticUrl}
      BUCKET_NAME: ${self:custom.bucketName}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /adprofileitems/{proxy+}
          method: GET
          authorizer:
            name: cognito
            scopes:
              - profiles_api/profiles_api
      - httpApi:
          path: /adtypes/{proxy+}
          method: GET
      - httpApi:
          path: /adlistitems/{proxy+}
          method: GET
      - httpApi:
          path: /featurelistitems/{proxy+}
          method: GET
      - httpApi:
          path: /ad/{id}
          method: GET
      - httpApi:
          path: /profile/{id}
          method: GET
      - httpApi:
          path: /adprofile/{id}
          method: GET
      - httpApi:
          path: /profilelistitems/{proxy+}
          method: GET
          authorizer:
            name: cognito
            scopes:
              - profiles_api/profiles_api
      - httpApi:
          path: /vocabulary/{id}
          method: GET
          authorizer:
            name: cognito
            scopes:
              - taxonomy_api/taxonomy_api
      - httpApi:
          path: /vocabularylistitems/{proxy+}
          method: GET
          authorizer:
            name: cognito
            scopes:
              - taxonomy_api/taxonomy_api
      - httpApi:
          path: /ad/{proxy+}
          method: POST
          authorizer:
            name: cognito
            scopes:
              - ads_api/ads_api
      - httpApi:
          path: /vocabulary/{proxy+}
          method: POST
          authorizer:
            name: cognito
            scopes:
              - taxonomy_api/taxonomy_api
      - httpApi:
          path: /profile/{proxy+}
          method: POST
          authorizer:
            name: cognito
            scopes:
              - profiles_api/profiles_api
      - httpApi:
          path: /panelpagelistitems/{proxy+}
          method: GET
          authorizer:
            name: authorizer2
      - httpApi:
          path: /panelpage/{proxy+}
          method: POST
          authorizer:
            name: cognito
      - httpApi:
          path: /panelpage/{proxy+}
          method: PUT
          authorizer:
            name: cognito
      - httpApi:
          path: /panelpage/{id}
          method: GET
          authorizer:
            name: authorizer2
  MediaApi:
    handler: bazel-bin/api/media/linux_amd64_pure_stripped/media
    role: EntityApiRole
    environment:
      BUCKET_NAME: ${self:custom.bucketName}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /media/{prefix}
          method: GET
      - httpApi:
          path: /media
          method: POST
          authorizer:
            name: cognito
            scopes:
              - media_api/media_api
  UserApi:
    handler: bazel-bin/api/user/linux_amd64_pure_stripped/user
    role: EntityApiRole
    environment:
      USER_POOL_ID: ${self:custom.userPoolId}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /publicuserprofile/{id}
          method: GET
  ProxyApi:
    handler: bazel-bin/api/proxy/linux_amd64_pure_stripped/proxy
    role: EntityApiRole
    environment:
      PROXY_AVE_DOMAIN: ${self:custom.proxyAveDomain}
      PROXY_AVE_APIKEY: ${self:custom.aveApikey}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /cities/{country}/{state}/{city}
          method: GET
      - httpApi:
          path: /ave
          method: GET
  ChatApi:
    handler: bazel-bin/api/chat/linux_amd64_pure_stripped/chat
    role: EntityApiRole
    environment:
      KEYSPACE_USERNAME: ${self:custom.keyspaceUsername}
      KEYSPACE_PASSWORD: ${self:custom.keyspacePassword}
      APIGATEWAY_ENDPOINT: ${self:custom.apigatewayEndpoint}
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /chatmessage/{proxy+}
          method: POST
          authorizer:
            name: cognito
            scopes:
              - chat/chat
      - httpApi:
          path: /chatconversations/{proxy+}
          method: GET
          authorizer:
            name: cognito
            scopes:
              - chat/chat
      - httpApi:
          path: /chatmessages/{proxy+}
          method: GET
          events:

          authorizer:
            name: cognito
            scopes:
              - chat/chat
      - httpApi:
          path: /lead/{proxy+}
          method: POST
      - httpApi:
          path: /leads/{proxy+}
          method: GET
          authorizer:
            name: cognito
            scopes:
              - ads_api/ads_api
              - profiles_api/profiles_api
      - httpApi:
          path: /page/{proxy+}
          method: POST
          authorizer:
            name: cognito
      - httpApi:
          path: /pages/{proxy+}
          method: GET
      - httpApi:
          path: /gridlayout/{proxy+}
          method: POST
          authorizer:
            name: cognito
      - httpApi:
          path: /gridlayouts/{proxy+}
          method: GET
          authorizer:
            name: cognito
  IndexEntity:
    handler: bazel-bin/func/index_entity/linux_amd64_pure_stripped/index_entity
    role: EntityApiRole
    environment:
      ELASTIC_URL: ${self:custom.elasticUrl}
      STAGE: ${opt:stage, 'dev'}
      BUCKET_NAME: ${self:custom.bucketName}
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .json.gz
          existing: true
  ConvertMedia:
    handler: bazel-bin/func/convert_media/linux_amd64_pure_stripped/convert_media
    role: EntityApiRole
    environment:
      STAGE: ${opt:stage, 'dev'}
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .css
          existing: true
  ValidateEntity:
    handler: bazel-bin/func/validate_entity/linux_amd64_pure_stripped/validate_entity
    role: EntityApiRole
    environment:
      STAGE: ${opt:stage, 'dev'}
  ReadableProfiles:
    handler: bazel-bin/func/readable_profiles/linux_amd64_pure_stripped/readable_profiles
    role: EntityApiRole
    environment:
      STAGE: ${opt:stage, 'dev'}
  Stream:
    handler: bazel-bin/api/stream/linux_amd64_pure_stripped/stream
    role: EntityApiRole
    environment:
      KEYSPACE_USERNAME: ${self:custom.keyspaceUsername}
      KEYSPACE_PASSWORD: ${self:custom.keyspacePassword}
      STAGE: ${opt:stage, 'dev'}
    events:
      - websocket:
          route: $connect
          authorizer:
            name: Authorize
            identitySource:
              - 'route.request.querystring.token'
      - websocket:
          route: $disconnect
  CssToJson:
    handler: bazel-bin/func/css_to_json/css_to_json.handler
    role: EntityApiRole
    runtime: nodejs10.x
    environment:
      STAGE: ${opt:stage, 'dev'}
  Authorize:
    handler: bazel-bin/api/authorizer/linux_amd64_pure_stripped/authorizer
    environment:
      USER_POOL_ID: ${self:custom.userPoolId}
      STAGE: ${opt:stage, 'dev'}
  Authorize2:
    handler: bazel-bin/api/authorizer2/linux_amd64_pure_stripped/authorizer2
    environment:
      USER_POOL_ID: ${self:custom.userPoolId}
      STAGE: ${opt:stage, 'dev'}